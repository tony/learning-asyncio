[tool.poetry]
name = "learning-asyncio"
version = "0.1.0"
description = ""
authors = ["Tony Narlock <tony@git-pull.com>"]
license = "All Rights Reseerved"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"

[tool.poetry.group.test.dependencies]
### Testing ###
pytest = "~7"
pytest-rerunfailures = "*"
pytest-watcher = "*"

[tool.poetry.group.coverage.dependencies]
### Coverage ###
codecov = "*"
coverage = "*"
pytest-cov = "*"

[tool.poetry.group.lint.dependencies]
### Lint ###
ruff = "*"
mypy = "*"
typing-extensions = { version = "*" }

[tool.mypy]
strict = true
files = [
  "src/",
]

[tool.ruff]
target-version = "py311"

[tool.lint]
select = [
  "E", # pycodestyle
  "F", # pyflakes
  "I", # isort
  "UP", # pyupgrade
  "A", # flake8-builtins
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "COM", # flake8-commas
  "EM", # flake8-errmsg
  "Q", # flake8-quotes
  "PTH", # flake8-use-pathlib
  "SIM", # flake8-simplify
  "TRY", # Trycertatops
  "PERF", # Perflint
  "RUF", # Ruff-specific rules
  "D", # pydocstyle
]
ignore = [
  "COM812", # missing trailing comma, ruff format conflict
]

[tool.ruff.lint.isort]
known-first-party = [
  "src",
  "doctest_document",
  "docutils_compat",
  "gp_libs",
  "linkify_issues",
  "pytest_doctest_docutils",
]
combine-as-imports = true

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"*/__init__.py" = ["F401"]

[tool.pytest.ini_options]
addopts = "--tb=short --no-header --showlocals --doctest-modules"
doctest_optionflags = "ELLIPSIS NORMALIZE_WHITESPACE"
testpaths = [
  "src",
]

[tool.pytest-watcher]
now = true
ignore_patterns = ["*.py.*.py"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
